{"ast":null,"code":"// server/server.js\n\nconst express = require('express');\nconst fetch = require('node-fetch');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\nconst app = express();\nconst port = 5000;\napp.use(cors());\napp.use(bodyParser.json());\nconst OPENAI_API_KEY = 'YOUR_OPENAI_API_KEY'; // Replace with your OpenAI API key\n\napp.post('/api/chat', async (req, res) => {\n  const {\n    prompt\n  } = req.body;\n  try {\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${OPENAI_API_KEY}`\n      },\n      body: JSON.stringify({\n        model: 'gpt-4',\n        messages: [{\n          role: 'user',\n          content: prompt\n        }],\n        max_tokens: 150,\n        temperature: 0.7\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    res.json(data);\n  } catch (error) {\n    console.error('Error:', error);\n    res.status(500).send('Internal Server Error');\n  }\n});\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});","map":{"version":3,"names":["express","require","fetch","bodyParser","cors","app","port","use","json","OPENAI_API_KEY","post","req","res","prompt","body","response","method","headers","JSON","stringify","model","messages","role","content","max_tokens","temperature","ok","Error","status","data","error","console","send","listen","log"],"sources":["/Users/sachinallums/my-app/src/openaiService.js"],"sourcesContent":["// server/server.js\n\nconst express = require('express');\nconst fetch = require('node-fetch');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\n\nconst app = express();\nconst port = 5000;\n\napp.use(cors());\napp.use(bodyParser.json());\n\nconst OPENAI_API_KEY = 'YOUR_OPENAI_API_KEY'; // Replace with your OpenAI API key\n\napp.post('/api/chat', async (req, res) => {\n    const { prompt } = req.body;\n\n    try {\n        const response = await fetch('https://api.openai.com/v1/chat/completions', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${OPENAI_API_KEY}`,\n            },\n            body: JSON.stringify({\n                model: 'gpt-4',\n                messages: [{ role: 'user', content: prompt }],\n                max_tokens: 150,\n                temperature: 0.7,\n            }),\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const data = await response.json();\n        res.json(data);\n    } catch (error) {\n        console.error('Error:', error);\n        res.status(500).send('Internal Server Error');\n    }\n});\n\napp.listen(port, () => {\n    console.log(`Server running on port ${port}`);\n});\n"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,KAAK,GAAGD,OAAO,CAAC,YAAY,CAAC;AACnC,MAAME,UAAU,GAAGF,OAAO,CAAC,aAAa,CAAC;AACzC,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAMI,GAAG,GAAGL,OAAO,CAAC,CAAC;AACrB,MAAMM,IAAI,GAAG,IAAI;AAEjBD,GAAG,CAACE,GAAG,CAACH,IAAI,CAAC,CAAC,CAAC;AACfC,GAAG,CAACE,GAAG,CAACJ,UAAU,CAACK,IAAI,CAAC,CAAC,CAAC;AAE1B,MAAMC,cAAc,GAAG,qBAAqB,CAAC,CAAC;;AAE9CJ,GAAG,CAACK,IAAI,CAAC,WAAW,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACtC,MAAM;IAAEC;EAAO,CAAC,GAAGF,GAAG,CAACG,IAAI;EAE3B,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAAC,4CAA4C,EAAE;MACvEc,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUR,cAAc;MAC7C,CAAC;MACDK,IAAI,EAAEI,IAAI,CAACC,SAAS,CAAC;QACjBC,KAAK,EAAE,OAAO;QACdC,QAAQ,EAAE,CAAC;UAAEC,IAAI,EAAE,MAAM;UAAEC,OAAO,EAAEV;QAAO,CAAC,CAAC;QAC7CW,UAAU,EAAE,GAAG;QACfC,WAAW,EAAE;MACjB,CAAC;IACL,CAAC,CAAC;IAEF,IAAI,CAACV,QAAQ,CAACW,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBZ,QAAQ,CAACa,MAAM,EAAE,CAAC;IAC7D;IAEA,MAAMC,IAAI,GAAG,MAAMd,QAAQ,CAACP,IAAI,CAAC,CAAC;IAClCI,GAAG,CAACJ,IAAI,CAACqB,IAAI,CAAC;EAClB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9BlB,GAAG,CAACgB,MAAM,CAAC,GAAG,CAAC,CAACI,IAAI,CAAC,uBAAuB,CAAC;EACjD;AACJ,CAAC,CAAC;AAEF3B,GAAG,CAAC4B,MAAM,CAAC3B,IAAI,EAAE,MAAM;EACnByB,OAAO,CAACG,GAAG,CAAC,0BAA0B5B,IAAI,EAAE,CAAC;AACjD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}