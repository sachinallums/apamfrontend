{"ast":null,"code":"// src/openaiService.js\n\nconst API_URL = 'https://api.openai.com/v1/engines/gpt-4/completions'; // Update to the appropriate URL for the model you are using\n\nconst openaiService = async prompt => {\n  try {\n    const response = await fetch(API_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer 0b4280fc-f1fc-4df6-8444-748fb9c2f09d` // Replace with your OpenAI API key\n      },\n      body: JSON.stringify({\n        prompt: prompt,\n        max_tokens: 150,\n        temperature: 0.7\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    if (!data.choices || data.choices.length === 0) {\n      throw new Error('No choices returned from OpenAI API');\n    }\n    return data.choices[0].text;\n  } catch (error) {\n    console.error('Error in openaiService:', error);\n    return 'Sorry, I am having trouble understanding right now. Please try again later.';\n  }\n};\nexport default openaiService;","map":{"version":3,"names":["API_URL","openaiService","prompt","response","fetch","method","headers","body","JSON","stringify","max_tokens","temperature","ok","Error","status","data","json","choices","length","text","error","console"],"sources":["/Users/sachinallums/my-app/src/openaiService.js"],"sourcesContent":["// src/openaiService.js\n\nconst API_URL = 'https://api.openai.com/v1/engines/gpt-4/completions'; // Update to the appropriate URL for the model you are using\n\nconst openaiService = async (prompt) => {\n    try {\n        const response = await fetch(API_URL, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer 0b4280fc-f1fc-4df6-8444-748fb9c2f09d`, // Replace with your OpenAI API key\n            },\n            body: JSON.stringify({\n                prompt: prompt,\n                max_tokens: 150,\n                temperature: 0.7,\n            }),\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        if (!data.choices || data.choices.length === 0) {\n            throw new Error('No choices returned from OpenAI API');\n        }\n\n        return data.choices[0].text;\n    } catch (error) {\n        console.error('Error in openaiService:', error);\n        return 'Sorry, I am having trouble understanding right now. Please try again later.';\n    }\n};\n\nexport default openaiService;\n"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAG,qDAAqD,CAAC,CAAC;;AAEvE,MAAMC,aAAa,GAAG,MAAOC,MAAM,IAAK;EACpC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,OAAO,EAAE;MAClCK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,6CAA6C,CAAE;MACpE,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBP,MAAM,EAAEA,MAAM;QACdQ,UAAU,EAAE,GAAG;QACfC,WAAW,EAAE;MACjB,CAAC;IACL,CAAC,CAAC;IAEF,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBV,QAAQ,CAACW,MAAM,EAAE,CAAC;IAC7D;IAEA,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;IAElC,IAAI,CAACD,IAAI,CAACE,OAAO,IAAIF,IAAI,CAACE,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE;MAC5C,MAAM,IAAIL,KAAK,CAAC,qCAAqC,CAAC;IAC1D;IAEA,OAAOE,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACE,IAAI;EAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OAAO,6EAA6E;EACxF;AACJ,CAAC;AAED,eAAenB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}